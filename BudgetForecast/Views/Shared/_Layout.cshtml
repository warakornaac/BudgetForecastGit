<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>@ViewBag.Title</title>
    <link rel="icon" type="image/x-icon" href="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSUUL4xmD5Dk_p1W7_8LFhfUBZi51UQf5UUCYKL8PWrbg&s?sz=100">
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

    <script src="~/Scripts/jquery-3.6.4.js"></script>
    <script src="~/Scripts/popper.min.js"></script>
    <script src="~/Scripts/jquery.inputmask.min.js"></script>
    <script src="~/Scripts/bootstrap-select.min.js"></script>
    <script src="~/Scripts/sweetalert2/sweetalert2.min.js"></script>
    <script src="~/Scripts/loadingoverlay.min.js"></script>

    <link href="~/Scripts/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-select.min.css" rel="stylesheet" />
    <link href="~/Content/font-awesome.min.css" rel="stylesheet" />
    <link href="~/Content/uicons-thin-straight.css" rel="stylesheet" />
    @*<link href="~/Content/style_admin.css" rel="stylesheet" />*@

    @{
        var DayCurrent = DateTime.Now.Day;
    }
    <style>
        .footer {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 60px;
            line-height: 60px;
            background-color: #f5f5f5;
        }

        .swal-footer {
            background-color: rgb(245, 248, 250);
            margin-top: 32px;
            border-top: 1px solid #E9EEF1;
            overflow: hidden;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <a class="navbar-brand" href="#"><b>BUDGET&FORECAST</b></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                @*PM*@
                @if (this.Session["UserType"].ToString() == "1" || this.Session["UserType"].ToString() == "2")
                {
                    <li class="nav-item active">
                        <a class="nav-link" href="@Url.Action("Index", "BudgetPm")">Budget PM</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "ForecastPm")">Forecast PM</a>
                    </li>
                }
                @*SALEMAN*@
                @if (this.Session["UserType"].ToString() == "1" || this.Session["UserType"].ToString() == "3")
                {
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "BudgetSale")">Budget SALESMAN</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "ForecastSale")">Forecast SALESMAN</a>
                    </li>
                    @*<li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index","ForecastMidMonthSale")">Forecast Mid Month </a>
                        </li>*@
                }
            </ul>
            <ul class="navbar-nav ml-auto">
                @*<li class="nav-item">
                        <a class="nav-link" href="">User AD (@Session["UserAD"] - @Session["UserType"])</a>
                    </li>*@
                <li class="nav-item">
                    <a class="nav-link" href="#">บัญชีของคุณ &nbsp; <i class="fa fa-user-o"></i> @Session["UserID"]</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" onclick="logoutSys();"><i class="fa fa-fw fa-sign-out"></i> Logout</a>
                </li>
            </ul>
        </div>
    </nav>
    <div class="container-fluid">
        @RenderBody()
    </div>

    @*<footer class="footer pl-3">
            <p>&copy; @DateTime.Now.Year - My Application</p>
        </footer>*@

    @*@Scripts.Render("~/bundles/jquery")*@
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>
<script type="text/javascript">
    var pathname = window.location.pathname.split('/');
    var pathId = pathname[1].replace('/', '');;
    var hostName = "";
    if (pathId != 'BudgetPm' && pathId != 'ForecastSale' && pathId != 'BudgetSale' && pathId != 'ForecastMidMonthSale') {
        hostName = '/' + pathId;
    }
    console.log("pathname = " + hostName);
    //set session expire alert
    var minutesForWarning = 1;
    var sessionTimeout = parseInt("@Session.Timeout");
    var showWarning = true;
    function SessionWarning() {
        showWarning = false;
        alert("Your session will expire in " + minutesForWarning + " mins! Please refresh page to continue working.");
        setTimeout(function () { showWarning = true; }, 1000);
    }
    function RedirectToWelcomePage() {
        if (showWarning) {
            Swal.fire({
                //title: 'Session expired. You will be redirected to login page.',
                html: 'Session expired. You will be redirected to login page.',
                icon: 'warning',
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'Close',
                allowOutsideClick: false,
                focusConfirm: false,
                allowOutsideClick: true,
                //timer: 6000,
                //timerProgressBar: true,
                onClose: () => {
                    $.post("@Url.Action("Logout", "Home")",function(res){
                         if (res.status === "success") {
                             LoadingShow();
                             window.location.href = '@Url.Action("Login", "Home")';
                         }
                         else
                         {
                             alert('Error Session');
                         }
                     });
                }
            });
        }
        //alert("Session expired. You will be redirected to welcome page.");
    }
    //setTimeout('SessionWarning()', (sessionTimeout - minutesForWarning) * 60 * 1000);
    setTimeout('RedirectToWelcomePage()', sessionTimeout * 60 * 1000);

    function logoutSys() {
        Swal.fire({
            title: 'Are you sure want to logout?',
            // html: html,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#00a65a',
            cancelButtonColor: '#C1C1C1',
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            allowOutsideClick: true,
            focusConfirm: false,
        }).then((result) => {
            if (result.value) {
                $.post("@Url.Action("Logout", "Home")",function(res){
                 if (res.status === "success") {
                     LoadingShow();
                     window.location.href = '@Url.Action("Login", "Home")';
                 }
                 else
                 {
                     alert('Error refresh');
                 }
              });
            }
        });
    }

    $(document).ready(function () {
        $("input.mask").inputmask({
            'alias': 'decimal',
            'rightAlign': true,
            'groupSeparator': '.',
            'autoGroup': true
        });
        //active menu
        $('li.active').removeClass('active').removeAttr('aria-current');
        $('a[href="' + location.pathname + '"]').closest('li').addClass('active').attr('aria-current', 'page');
        //add comma
        //$('input.mask').keyup(function (event) {
        // skip for arrow keys
        //if (event.which >= 37 && event.which <= 40) {
        //    event.preventDefault();
        //}
        //var $this = $(this);
        //var num = $this.val().replace(/,/gi, "").split("").reverse().join("");
        //var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
        ////console.log(num2);
        //// the following line has been simplified. Revision history contains original.
        //$this.val(num2);
        //});

        function RemoveRougeChar(convertString) {
            if (convertString.substring(0, 1) == ",") {
                return convertString.substring(1, convertString.length)
            }
            return convertString;
        }
        //event past del "-"
        $("input[type=text]").on("paste", function (event) {
            var element = $(this);
            setTimeout(function () {
                element.val(element.val().replace(/[^0-9\.]/g, ''));
            }, 0);
        });
    });

    function validateFloatKeyPress(el, evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        var number = el.value.split('.');
        if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        //just one dot
        if (number.length > 1 && charCode == 46) {
            return false;
        }
        //get the carat position
        var caratPos = getSelectionStart(el);
        var dotPos = el.value.indexOf(".");
        if (caratPos > dotPos && dotPos > -1 && (number[1].length > 1)) {
            return false;
        }
        return true;
    }
    function getSelectionStart(o) {
        if (o.createTextRange) {
            var r = document.selection.createRange().duplicate()
            r.moveEnd('character', o.value.length)
            if (r.text == '') return o.value.length
            return o.value.lastIndexOf(r.text)
        } else return o.selectionStart
    }
    function IntegerAndDecimal(e, obj, isDecimal) {
        if ([e.keyCode || e.which] == 8) //this is to allow backspace
            return true;

        if ([e.keyCode || e.which] == 46) //this is to allow decimal point
        {
            if (isDecimal == 'true') {
                var val = obj.value;
                if (val.indexOf(".") > -1) {
                    e.returnValue = false;
                    return false;
                }
                return true;
            }
            else {
                e.returnValue = false;
                return false;
            }
        }

        if ([e.keyCode || e.which] < 48 || [e.keyCode || e.which] > 57)
            e.preventDefault ? e.preventDefault() : e.returnValue = false;
    }

    //check default value number
    const getVowels = async (str, defaultValue = '') => {
        if (typeof str == "string" && (str === null || str === '')) {
            str = defaultValue;
        } else if (typeof str == "number" && await isNaN(str)) {
            str = defaultValue;
        } else if (str === null) {
            str = defaultValue;
        }
        return str;
    }

    //add comma to number
    function numberWithCommas(x) {
        return x.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",");
    }

    function RemoveRougeChar(convertString) {
        if (convertString.substring(0, 1) == ",") {
            return convertString.substring(1, convertString.length)
        }
        return convertString;
    }

    function LoadingShow() {
        $.LoadingOverlay("show");
    }

    function LoadingHide() {
        $.LoadingOverlay("hide");
    }
</script>
